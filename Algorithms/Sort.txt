1. 역정렬 (내림차순 정렬)
Java에서는 Collections.sort()와 Comparator.reverseOrder()를 활용하면 돼.

import java.util.*;

public class Main {
    public static void main(String[] args) {
        값을 변경만 하고 싶다면? Arrays.asList || 요소를 추가하거나 삭제해야 한다면? → new ArrayList<>(Arrays.asList(...))
        List<Integer> A = Arrays.asList(3, 1, 4, 1, 5, 9, 2);

        // 내림차순 정렬
        A.sort(Comparator.reverseOrder());

        System.out.println(A); // 출력: [9, 5, 4, 3, 2, 1, 1]
    }
}

2. 특정 요소를 기준으로 정렬 (튜플, 리스트 정렬)
Java에서는 Comparator.comparing()을 활용하면 돼.

import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<int[]> A = new ArrayList<>();
        A.add(new int[]{1, 3});
        A.add(new int[]{3, 1});
        A.add(new int[]{2, 2});

        // 두 번째 요소(인덱스 1)를 기준으로 정렬
        A.sort(Comparator.comparingInt(x -> x[1]));

        // 출력
        for (int[] arr : A) {
            System.out.println(Arrays.toString(arr));
        }
        // 출력: [3, 1]
        //       [2, 2]
        //       [1, 3]
    }
}

3. 문자열 정렬 (길이 기준, 사전순 정렬)
Java에서는 Comparator.comparingInt()를 사용하면 돼.

import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("ab", "ac", "aab", "baa", "bac", "aa");

        // 문자열 길이 기준 정렬 후, 길이가 같으면 사전순 정렬
        words.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));

        System.out.println(words); // 출력: [aa, ab, ac, aab, baa, bac]
    }
}
